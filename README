NAME
    CGI::Application::Plugin::Config::Perl - Pure Perl config file
    management for CGI::Application

SYNOPSIS
     use CGI::Application::Plugin::Config::Perl 'cfg';

    In your instance script:

     my $app = WebApp->new(PARAMS => { cfg_file => 'config.pl' });
     $app->run();

    In your application module:

     sub my_run_mode {
        my $self = shift;

        # Access a config hash key directly
        $self->cfg('field');

        # Return config as hash
        %CFG = $self->cfg;

     }

DESCRIPTION
    CGI::Application::Plugin::Config::Perl adds easy access to a pure Perl
    config file to your CGI::Application projects. Lazy loading is used to
    prevent the config file from being parsed if no configuration variables
    are accessed during the request, so the config file is not parsed until
    it is actually needed.

    I have been using pure Perl config files for almost a decade and find
    they work very well. I originally wrote
    CGI::Application::Plugin::ConfigAuto to support all kinds of config
    files, but found that I only ever used Perl-based config files. This
    module has the same interface as the ConfigAuto plugin, without the
    option for other formats, and the extra dependency and resource use that
    comes with that flexibility.

  Why use Pure Perl config files
    A pure Perl config file could be a great choice if your config files
    created and maintained by Perl programmers. They have a number of
    benefits:

    *   There is no new syntax to learn beyond Perl

    *   They support all features that Perl does

    *   There is no resource overhead to parse a format and translate into
        Perl

    *   There are no additional module dependencies

  Support for multiple config files
    This plugin supports multiple config files for a single application,
    allowing config files to override each other in a particular order. This
    covers even complex cases, where you have a global config file, and
    second local config file which overrides a few variables.

DECLARING CONFIG FILE LOCATIONS
    It is recommended that you to declare your config file locations in the
    instance scripts, where it will have minimum impact on your application.
    This technique is ideal when you intend to reuse your module to support
    multiple configuration files. If you have an application with multiple
    instance scripts which share a single config file, you may prefer to
    call the plugin from the setup() method.

     # In your instance script
     # value can also be an arrayref of config files
     my $app = WebApp->new(PARAMS => { cfg_file => 'config.pl' })

     # OR ...

     # Pass in an array of config files, and they will be processed in order.
     $app->cfg_file('../../config/config.pl');

    Your config files should be referenced using the syntax example above.
    Note that the key "config_files" can be used as alternative to cfg_file.

METHODS
  cfg()
     # Access a config hash key directly
     $self->cfg('field');

     # Return config as hash
     my %CFG = $self->cfg;

     # return as hashref
     my $cfg_href = $self->cfg;

    A method to access project configuration variables. The config file is
    parsed on the first call with a perl hash representation stored in
    memory. Subsequent calls will use this version, rather than re-reading
    the file.

    In list context, it returns the configuration data as a hash. In scalar
    context, it returns the configuration data as a hashref.

  config()
    "config()" in CGI::Application::Standard::Config is provided as an alias
    to cfg() for compliance with CGI::Application::Standard::Config. It
    always exported by default per the standard.

  std_config()
    "std_config()" in CGI::Application::Standard::Config is implemented to
    comply with CGI::Application::Standard::Config. It's for developers.
    Users can ignore it.

  cfg_file()
     $self->cfg_file('my_config_file.pl');

    Supply an array of config files, and they will be processed in order.

Example Perl config file
    Here's a simple example Perl config file. Be sure that your last
    statement returns a hash reference.

        my %CFG = ();

        # directory path name
        $CFG{ROOT_DIR} = '/home/mark/www';

        # website URL
        $CFG{ROOT_URL} = 'http://mark.stosberg.com/';

        \%CFG;

SEE ALSO
    CGI::Application CGI::Application::Plugin::ValidateRM
    CGI::Application::Plugin::DBH CGI::Application::Standard::Config.
    perl(1)

AUTHOR
    Mark Stosberg <mark@summersault.com>

LICENSE
    Copyright (C) 2010 Mark Stosberg <mark@summersault.com>

    This library is free software. You can modify and or distribute it under
    the same terms as Perl itself.

